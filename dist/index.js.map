{"version":3,"sources":["../src/index.ts","../src/commands/install.ts","../src/commands/list.ts","../src/commands/create.ts","../src/templates/basic.ts","../src/templates/auth.ts","../src/templates/ui.ts","../src/templates/api.ts","../src/templates/convex.ts","../src/templates/neon.ts","../src/templates/index.ts","../src/utils/prompts.ts","../src/commands/update.ts"],"names":["defineCommand","runCommand","consola","resolve","join","existsSync","readFileSync","writeFileSync","execSync","pc","installCommand","args","targetDir","layer","registry","installLocalLayer","installPackageLayer","layerPath","resolvedLayerPath","packageJsonPath","targetPackageJsonPath","targetPackageJson","layerPackageJson","error","layerPackage","command","getPackageManagerCommand","listCommand","format","detailed","resolvedTargetDir","layers","getInstalledLayers","index","dep","version","packageJson","allDependencies","name","layerPackageJsonPath","mkdirSync","readdirSync","downloadTemplate","basicTemplate","outputDir","pluginContent","componentContent","composableContent","authTemplate","loginComponentContent","uiTemplate","buttonComponentContent","apiTemplate","apiEndpointContent","convexTemplate","schemaContent","queriesContent","mutationsContent","taskListComponent","taskFormComponent","demoComponent","tasksComposable","authComposable","setupGuideMd","description","nuxtConfig","convexConfig","readmeMd","neonTemplate","dbIndexContent","drizzleConfigContent","dbStatusApiContent","serverConfigContent","setupDbContent","neonDbComposable","usersListComponent","envExampleContent","templates","getTemplateNames","prompts","selectFromOptions","options","message","descriptions","choices","option","promptConfirm","defaultValue","createCommand","initialTemplate","gitTemplate","customTemplate","packageManager","skipInstall","skipGit","gigetProvider","useNuxiTemplate","template","templateNames","selectedTemplate","sanitizedName","fullName","resolvedOutputDir","updatePackageJson","initializeGit","createLayerFromGitTemplate","createLayerFromCustomTemplate","createLayerFromTemplate","installDependencies","_error","provider","files","file","templateName","createLayerStructure","dependencies","readme","playgroundApp","playgroundConfig","gitignore","updateCommand","_dryRun","_useLatest","updateLayer","updateAllLayers","getUpdateCommand","layerDependencies","isNuxtLayer","packageName","main","showBanner","banner","runMain"],"mappings":"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","sourcesContent":["import { defineCommand, runCommand } from 'citty';\nimport consola from 'consola';\nimport { installCommand } from './commands/install';\nimport { listCommand } from './commands/list';\nimport { createCommand } from './commands/create';\nimport { updateCommand } from './commands/update';\nimport pc from 'picocolors';\nimport { getTemplateNames } from './templates';\n\nconst main = defineCommand({\n  meta: {\n    name: 'alpha',\n    version: '0.1.0',\n    description: 'CLI tool for managing Nuxt layers',\n  },\n  subCommands: {\n    install: installCommand,\n    list: listCommand,\n    create: createCommand,\n    update: updateCommand,\n  },\n  args: {\n    verbose: {\n      type: 'boolean',\n      description: 'Show verbose output',\n      alias: 'v',\n      default: false,\n    },\n    silent: {\n      type: 'boolean',\n      description: 'Suppress all output',\n      default: false,\n    },\n    help: {\n      type: 'boolean',\n      description: 'Show help',\n      alias: 'h',\n      default: false,\n    },\n    version: {\n      type: 'boolean',\n      description: 'Show version',\n      default: false,\n    },\n  },\n  run: async ({ args }) => {\n    if (args.version) {\n      console.log('alpha v0.1.0');\n      return;\n    }\n\n    // Show welcome message and help if no subcommand is provided\n    showBanner();\n    console.log(\n      `\\n${pc.green('α')} ${pc.bold(\n        'Alpha'\n      )} - CLI tool for managing Nuxt layers\\n`\n    );\n    console.log(\n      `Usage: ${pc.cyan('alpha')} ${pc.yellow('<command>')} ${pc.gray(\n        '[options]'\n      )}\\n`\n    );\n    console.log('Commands:');\n    console.log(`  ${pc.yellow('install')}  Install a Nuxt layer`);\n    console.log(`  ${pc.yellow('list')}     List installed Nuxt layers`);\n    console.log(`  ${pc.yellow('create')}   Create a new Nuxt layer`);\n    console.log(`  ${pc.yellow('update')}   Update installed Nuxt layers`);\n\n    console.log('\\nTemplates:');\n    getTemplateNames().forEach((templateName) => {\n      console.log(`  ${pc.magenta(templateName)}`);\n    });\n\n    console.log('\\nPro Tip:');\n    console.log(\n      `  Use ${pc.cyan(\n        'alpha create my-layer --use-nuxi-template'\n      )} to create a layer using the official Nuxt layer template`\n    );\n\n    console.log('\\nOptions:');\n    console.log(`  ${pc.gray('-h, --help')}     Show help`);\n    console.log(`  ${pc.gray('-v, --verbose')}  Show verbose output`);\n    console.log(`  ${pc.gray('--version')}      Show version\\n`);\n    console.log(\n      `Run ${pc.cyan('alpha')} ${pc.yellow('<command>')} ${pc.gray(\n        '--help'\n      )} for help with a specific command.\\n`\n    );\n  },\n});\n\nfunction showBanner() {\n  const banner = `\n  ${pc.cyan('     _    _       _           ')}\n  ${pc.cyan('    / \\\\  | |_ __ | |__   __ _ ')}\n  ${pc.cyan(\"   / _ \\\\ | | '_ \\\\| '_ \\\\ / _` |\")}\n  ${pc.cyan('  / ___ \\\\| | |_) | | | | (_| |')}\n  ${pc.cyan(' /_/   \\\\_\\\\_| .__/|_| |_|\\\\__,_|')}\n  ${pc.cyan('          |_|                 ')}\n  ${pc.gray('v0.1.0')}`;\n\n  console.log(banner);\n}\n\nexport async function runMain() {\n  await runCommand(main, { rawArgs: process.argv.slice(2) });\n}\n\n// Allow running directly with Node.js\nif (process.argv[1] === import.meta.url) {\n  runMain().catch((error) => {\n    consola.error(error);\n    process.exit(1);\n  });\n}\n","import { defineCommand } from 'citty';\nimport consola from 'consola';\nimport { resolve, join } from 'pathe';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { execSync } from 'child_process';\nimport pc from 'picocolors';\n\nexport const installCommand = defineCommand({\n  meta: {\n    name: 'install',\n    description: 'Install a Nuxt layer',\n  },\n  args: {\n    layer: {\n      type: 'positional',\n      description: 'Layer name or path to install',\n      required: true,\n    },\n    registry: {\n      type: 'string',\n      description: 'Package registry to use (npm, yarn, pnpm)',\n      default: 'npm',\n    },\n  },\n  async run({ args }) {\n    const targetDir = process.cwd();\n    const { layer, registry } = args;\n\n    // Check if the layer is a local path or a package\n    if (layer.startsWith('.') || layer.startsWith('/')) {\n      await installLocalLayer(layer, targetDir);\n    } else {\n      await installPackageLayer(layer, targetDir, registry as string);\n    }\n  },\n});\n\n/**\n * Install a layer from a local directory\n */\nasync function installLocalLayer(layerPath: string, targetDir: string) {\n  const resolvedLayerPath = resolve(process.cwd(), layerPath);\n\n  if (!existsSync(resolvedLayerPath)) {\n    consola.error(`Layer path not found: ${resolvedLayerPath}`);\n    process.exit(1);\n  }\n\n  consola.info(`Copying layer files from ${resolvedLayerPath} to ${targetDir}`);\n\n  try {\n    // Check if the layer has a package.json\n    const packageJsonPath = join(resolvedLayerPath, 'package.json');\n    if (!existsSync(packageJsonPath)) {\n      consola.warn(`No package.json found in layer: ${resolvedLayerPath}`);\n      consola.warn('This might not be a valid Nuxt layer.');\n    }\n\n    // Read the target project's package.json\n    const targetPackageJsonPath = join(targetDir, 'package.json');\n    if (!existsSync(targetPackageJsonPath)) {\n      consola.error(`No package.json found in target directory: ${targetDir}`);\n      process.exit(1);\n    }\n\n    const targetPackageJson = JSON.parse(\n      readFileSync(targetPackageJsonPath, 'utf-8')\n    );\n\n    // Read the layer's package.json to get dependencies\n    const layerPackageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n\n    // Add the layer as a dependency in the target project\n    if (!targetPackageJson.dependencies) {\n      targetPackageJson.dependencies = {};\n    }\n\n    // Use the layer's name and version from its package.json\n    targetPackageJson.dependencies[\n      layerPackageJson.name\n    ] = `file:${resolvedLayerPath}`;\n\n    // Write the updated package.json\n    writeFileSync(\n      targetPackageJsonPath,\n      JSON.stringify(targetPackageJson, null, 2)\n    );\n\n    consola.success(\n      `Local layer ${pc.green(layerPackageJson.name)} installed successfully`\n    );\n  } catch (error) {\n    consola.error(`Failed to install local layer: ${error}`);\n    process.exit(1);\n  }\n}\n\n/**\n * Install a layer from a package registry\n */\nasync function installPackageLayer(\n  layerPackage: string,\n  targetDir: string,\n  registry: string\n) {\n  consola.info(`Installing layer package: ${layerPackage}`);\n\n  try {\n    // Example: Using npm/yarn/pnpm to install the package\n    const command = getPackageManagerCommand(registry, layerPackage);\n\n    consola.debug(`Running command: ${command}`);\n    execSync(command, {\n      cwd: targetDir,\n      stdio: 'inherit',\n    });\n\n    consola.success(`Layer package installed: ${layerPackage}`);\n  } catch (error) {\n    consola.error(`Failed to install layer package: ${layerPackage}`);\n    throw error;\n  }\n}\n\n/**\n * Get the appropriate package manager command based on the registry\n */\nfunction getPackageManagerCommand(\n  registry: string,\n  layerPackage: string\n): string {\n  switch (registry.toLowerCase()) {\n  case 'npm':\n    return `npm install ${layerPackage}`;\n  case 'yarn':\n    return `yarn add ${layerPackage}`;\n  case 'pnpm':\n    return `pnpm add ${layerPackage}`;\n  default:\n    consola.warn(`Unknown registry: ${registry}, defaulting to npm`);\n    return `npm install ${layerPackage}`;\n  }\n}\n","import { defineCommand } from 'citty';\nimport consola from 'consola';\nimport { resolve } from 'pathe';\nimport { existsSync, readFileSync } from 'fs';\nimport pc from 'picocolors';\n\nexport const listCommand = defineCommand({\n  meta: {\n    name: 'list',\n    description: 'List installed Nuxt layers',\n  },\n  args: {\n    'target-dir': {\n      type: 'string',\n      description: 'Target directory to check for installed layers',\n      default: './',\n    },\n    format: {\n      type: 'string',\n      description: 'Output format (table, json)',\n      default: 'table',\n      options: ['table', 'json'],\n    },\n    detailed: {\n      type: 'boolean',\n      description: 'Show detailed information',\n      default: false,\n    },\n  },\n  run: async ({ args }) => {\n    const { 'target-dir': targetDir, format, detailed } = args;\n\n    consola.info(`Listing installed Nuxt layers in: ${pc.cyan(targetDir)}`);\n\n    // Resolve the target directory\n    const resolvedTargetDir = resolve(process.cwd(), targetDir);\n\n    // Check if the target directory exists\n    if (!existsSync(resolvedTargetDir)) {\n      consola.error(`Target directory does not exist: ${resolvedTargetDir}`);\n      process.exit(1);\n    }\n\n    try {\n      // Get installed layers\n      const layers = getInstalledLayers(resolvedTargetDir);\n\n      if (layers.length === 0) {\n        consola.info('No Nuxt layers installed');\n        return;\n      }\n\n      // Output the layers based on the format\n      if (format === 'json') {\n        console.log(JSON.stringify(layers, null, 2));\n      } else {\n        // Table format output\n        console.log('');\n        console.log(`  ${pc.bold('Installed Nuxt Layers')}`);\n        console.log('  ────────────────────────────────────────');\n        layers.forEach((layer, index) => {\n          console.log(\n            `  ${pc.cyan(index + 1)}. ${pc.bold(layer.name)} ${pc.dim(\n              `v${layer.version}`\n            )}`\n          );\n          if (detailed) {\n            console.log(\n              `     ${pc.gray('Description:')} ${\n                layer.description || 'No description'\n              }`\n            );\n            console.log(`     ${pc.gray('Path:')} ${layer.path}`);\n            if (\n              layer.dependencies &&\n              Object.keys(layer.dependencies).length > 0\n            ) {\n              console.log(`     ${pc.gray('Dependencies:')}`);\n              Object.entries(layer.dependencies).forEach(([dep, version]) => {\n                console.log(`       - ${dep}: ${version}`);\n              });\n            }\n          }\n        });\n        console.log('');\n        console.log(`  ${pc.gray(`Total: ${layers.length} layer(s)`)}`);\n        console.log('');\n      }\n    } catch (_error) {\n      consola.error('Failed to list installed layers');\n      process.exit(1);\n    }\n  },\n});\n\ninterface Layer {\n  name: string;\n  version: string;\n  description?: string;\n  path: string;\n  dependencies?: Record<string, string>;\n}\n\n/**\n * Get installed Nuxt layers in the target directory\n */\nfunction getInstalledLayers(targetDir: string): Layer[] {\n  const layers: Layer[] = [];\n\n  try {\n    // Check if package.json exists\n    const packageJsonPath = resolve(targetDir, 'package.json');\n    if (!existsSync(packageJsonPath)) {\n      consola.warn(`No package.json found in: ${targetDir}`);\n      return layers;\n    }\n\n    // Read package.json\n    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n\n    // Get dependencies\n    const allDependencies = {\n      ...packageJson.dependencies,\n      ...packageJson.devDependencies,\n    };\n\n    // Filter for Nuxt layers\n    // This is a simplified approach - in a real scenario, you might want to check\n    // if the package is actually a Nuxt layer by inspecting its contents\n    for (const [name, version] of Object.entries(allDependencies)) {\n      if (\n        name.includes('layer') ||\n        name.includes('nuxt-') ||\n        name.startsWith('@nuxt/') ||\n        name.startsWith('@bahamut/')\n      ) {\n        try {\n          // Try to find the package's package.json\n          const layerPath = resolve(targetDir, 'node_modules', name);\n          const layerPackageJsonPath = resolve(layerPath, 'package.json');\n\n          if (existsSync(layerPackageJsonPath)) {\n            const layerPackageJson = JSON.parse(\n              readFileSync(layerPackageJsonPath, 'utf-8')\n            );\n\n            layers.push({\n              name,\n              version:\n                typeof version === 'string'\n                  ? version.replace(/^\\^|~/, '')\n                  : 'unknown',\n              description: layerPackageJson.description,\n              path: layerPath,\n              dependencies: layerPackageJson.dependencies,\n            });\n          }\n        } catch (error) {\n          consola.debug(`Failed to read package info for: ${name}`);\n        }\n      }\n    }\n\n    return layers;\n  } catch (error) {\n    consola.error(`Failed to read package information from: ${targetDir}`);\n    throw error;\n  }\n}\n","import { defineCommand } from 'citty';\nimport consola from 'consola';\nimport { resolve, join } from 'pathe';\nimport {\n  existsSync,\n  mkdirSync,\n  writeFileSync,\n  readdirSync,\n  readFileSync,\n} from 'fs';\nimport pc from 'picocolors';\nimport { execSync } from 'child_process';\nimport { downloadTemplate } from 'giget';\nimport { getTemplateNames, templates } from '../templates';\n// Import the new prompts utility instead of createInterface\nimport { selectFromOptions, promptConfirm } from '../utils/prompts';\n\n// Remove the old selectFromList function as we'll use the new prompts utility\n\nexport const createCommand = defineCommand({\n  meta: {\n    name: 'create',\n    description: 'Create a new Nuxt layer',\n  },\n  args: {\n    name: {\n      type: 'positional',\n      description: 'Name of the layer to create',\n      required: true,\n    },\n    'output-dir': {\n      type: 'string',\n      description: 'Directory where the layer will be created',\n      default: './',\n    },\n    template: {\n      type: 'string',\n      description: 'Template to use for creating the layer',\n      default: 'basic',\n      options: getTemplateNames(),\n    },\n    'git-template': {\n      type: 'string',\n      description:\n        'Git repository template URL to use (e.g., \"github:user/repo\")',\n    },\n    'custom-template': {\n      type: 'string',\n      description: 'Custom template path or URL to use',\n    },\n    description: {\n      type: 'string',\n      description: 'Description of the layer',\n      default: 'A Nuxt layer',\n    },\n    'package-manager': {\n      type: 'string',\n      description: 'Package manager to use for initialization',\n      default: 'npm',\n      options: ['npm', 'yarn', 'pnpm'],\n    },\n    'skip-install': {\n      type: 'boolean',\n      description: 'Skip installing dependencies',\n      default: false,\n    },\n    'skip-git': {\n      type: 'boolean',\n      description: 'Skip Git initialization',\n      default: false,\n    },\n    'giget-provider': {\n      type: 'string',\n      description: 'Provider for giget (github, gitlab, etc.)',\n      default: 'github',\n    },\n    'use-nuxi-template': {\n      type: 'boolean',\n      description: 'Use the official Nuxt layer template',\n      default: false,\n    },\n  },\n  run: async ({ args }) => {\n    const {\n      name,\n      'output-dir': outputDir,\n      template: initialTemplate,\n      'git-template': gitTemplate,\n      'custom-template': customTemplate,\n      description,\n      'package-manager': packageManager,\n      'skip-install': skipInstall,\n      'skip-git': skipGit,\n      'giget-provider': gigetProvider,\n      'use-nuxi-template': useNuxiTemplate,\n    } = args;\n\n    // If no template is specified and not using nuxi template or git template, show selection interface\n    let template = initialTemplate;\n    if (!template && !useNuxiTemplate && !gitTemplate && !customTemplate) {\n      const templateNames = getTemplateNames();\n      const templateDescriptions: Record<string, string> = {\n        basic: 'A basic Nuxt layer with minimal setup',\n        auth: 'Authentication layer with login/register functionality',\n        ui: 'UI components and styling utilities',\n        api: 'API integration and data fetching utilities',\n        convex: 'Real-time database with Convex integration',\n        neon: 'Serverless Postgres database with Neon integration',\n      };\n\n      // Use the new prompts utility instead of the custom readline implementation\n      const selectedTemplate = await selectFromOptions(\n        templateNames,\n        'Select a template for your Nuxt layer:',\n        templateDescriptions\n      );\n\n      if (!selectedTemplate) {\n        consola.info('Layer creation cancelled.');\n        process.exit(0);\n      }\n\n      template = selectedTemplate;\n      consola.info(`Using template: ${pc.cyan(template)}`);\n    } else {\n      template = initialTemplate;\n    }\n\n    // Sanitize the name for directory creation\n    const sanitizedName = name\n      .replace(/[^a-zA-Z0-9-_]/g, '-')\n      .replace(/-+/g, '-')\n      .toLowerCase();\n\n    // Ensure the name is valid for npm package\n    const fullName = name.startsWith('@')\n      ? name\n      : name.includes('/')\n        ? name\n        : sanitizedName;\n\n    // Resolve the output directory\n    const resolvedOutputDir = resolve(process.cwd(), outputDir, sanitizedName);\n\n    // Check if the directory already exists\n    if (existsSync(resolvedOutputDir)) {\n      const files = readdirSync(resolvedOutputDir);\n      if (files.length > 0) {\n        // Use promptConfirm for better UX when directory exists\n        const shouldContinue = await promptConfirm(\n          `Directory ${pc.yellow(\n            resolvedOutputDir\n          )} already exists and is not empty. Continue anyway?`,\n          false\n        );\n\n        if (!shouldContinue) {\n          consola.info('Layer creation cancelled.');\n          process.exit(0);\n        }\n      }\n    }\n\n    try {\n      // If using the official Nuxt layer template\n      if (useNuxiTemplate) {\n        consola.info('Creating layer using official Nuxt layer template');\n\n        // Create the directory if it doesn't exist\n        if (!existsSync(resolvedOutputDir)) {\n          mkdirSync(resolvedOutputDir, { recursive: true });\n        }\n\n        // Use npm create nuxt@latest -t layer\n        const createCommand = `${packageManager} create nuxt@latest -t layer ${resolvedOutputDir} --no-git`;\n\n        consola.info(`Running: ${pc.cyan(createCommand)}`);\n        execSync(createCommand, { stdio: 'inherit' });\n\n        // Update package.json with the provided name and description\n        updatePackageJson(resolvedOutputDir, fullName, description);\n\n        // Initialize Git if not skipped\n        if (!skipGit) {\n          initializeGit(resolvedOutputDir);\n        }\n\n        consola.success(\n          `Nuxt layer ${pc.green(\n            fullName\n          )} created successfully using the official Nuxt layer template!`\n        );\n        consola.info('To get started, run:');\n        console.log('');\n        console.log(`  ${pc.cyan('cd')} ${outputDir}/${sanitizedName}`);\n        if (skipInstall) {\n          console.log(\n            `  ${pc.cyan(\n              packageManager === 'npm'\n                ? 'npm install'\n                : packageManager === 'yarn'\n                  ? 'yarn'\n                  : 'pnpm install'\n            )}`\n          );\n        }\n        console.log(\n          `  ${pc.cyan(\n            packageManager === 'npm'\n              ? 'npm run dev'\n              : packageManager === 'yarn'\n                ? 'yarn dev'\n                : 'pnpm dev'\n          )}`\n        );\n        console.log('');\n        return;\n      }\n\n      // Create the directory\n      mkdirSync(resolvedOutputDir, { recursive: true });\n      consola.success(`Created directory: ${pc.green(resolvedOutputDir)}`);\n\n      // Determine how to create the layer\n      if (gitTemplate) {\n        await createLayerFromGitTemplate(\n          gitTemplate,\n          resolvedOutputDir,\n          fullName,\n          description\n        );\n      } else if (customTemplate) {\n        await createLayerFromCustomTemplate(\n          customTemplate,\n          gigetProvider,\n          resolvedOutputDir,\n          fullName,\n          description\n        );\n      } else {\n        // Use built-in template\n        createLayerFromTemplate(\n          resolvedOutputDir,\n          fullName,\n          description,\n          template\n        );\n      }\n\n      // Initialize Git if not skipped\n      if (!skipGit) {\n        initializeGit(resolvedOutputDir);\n      }\n\n      // Install dependencies if not skipped\n      if (!skipInstall) {\n        installDependencies(resolvedOutputDir, packageManager);\n      }\n\n      consola.success(`Nuxt layer ${pc.green(fullName)} created successfully!`);\n      consola.info('To get started, run:');\n      console.log('');\n      console.log(`  ${pc.cyan('cd')} ${outputDir}/${sanitizedName}`);\n      if (skipInstall) {\n        console.log(\n          `  ${pc.cyan(\n            packageManager === 'npm'\n              ? 'npm install'\n              : packageManager === 'yarn'\n                ? 'yarn'\n                : 'pnpm install'\n          )}`\n        );\n      }\n      console.log(\n        `  ${pc.cyan(\n          packageManager === 'npm'\n            ? 'npm run dev'\n            : packageManager === 'yarn'\n              ? 'yarn dev'\n              : 'pnpm dev'\n        )}`\n      );\n      console.log('');\n    } catch (_error) {\n      consola.error(`Failed to create Nuxt layer: ${_error}`);\n      process.exit(1);\n    }\n  },\n});\n\n/**\n * Create a layer from a Git template using giget\n */\nasync function createLayerFromGitTemplate(\n  gitTemplate: string,\n  outputDir: string,\n  name: string,\n  description: string\n) {\n  consola.info(`Creating layer from Git template: ${pc.cyan(gitTemplate)}`);\n\n  try {\n    // Download the template using giget\n    await downloadTemplate(gitTemplate, {\n      dir: outputDir,\n      force: true,\n    });\n\n    consola.success(`Downloaded template from ${gitTemplate}`);\n\n    // Update the package.json with the new name and description\n    updatePackageJson(outputDir, name, description);\n\n    return true;\n  } catch (_error) {\n    consola.error(`Failed to download template from ${gitTemplate}: ${_error}`);\n    throw _error;\n  }\n}\n\n/**\n * Create a layer from a custom template (could be a local path or remote URL)\n */\nasync function createLayerFromCustomTemplate(\n  customTemplate: string,\n  provider: string,\n  outputDir: string,\n  name: string,\n  description: string\n) {\n  consola.info(\n    `Creating layer from custom template: ${pc.cyan(customTemplate)}`\n  );\n\n  try {\n    // Check if it's a local path\n    if (existsSync(customTemplate) && !customTemplate.includes(':')) {\n      // It's a local path, copy the files\n      const files = readdirSync(customTemplate, { withFileTypes: true });\n\n      for (const file of files) {\n        if (file.name === 'node_modules' || file.name === '.git') {\n          continue;\n        }\n\n        // Copy files or directories\n        if (file.isDirectory()) {\n          execSync(\n            `cp -R \"${join(customTemplate, file.name)}\" \"${join(\n              outputDir,\n              file.name\n            )}\"`\n          );\n        } else {\n          execSync(\n            `cp \"${join(customTemplate, file.name)}\" \"${join(\n              outputDir,\n              file.name\n            )}\"`\n          );\n        }\n      }\n\n      consola.success(`Copied template from ${customTemplate}`);\n    } else {\n      // It's a remote URL, use giget\n      const template = customTemplate.includes(':')\n        ? customTemplate\n        : `${provider}:${customTemplate}`;\n\n      await downloadTemplate(template, {\n        dir: outputDir,\n        force: true,\n      });\n\n      consola.success(`Downloaded template from ${template}`);\n    }\n\n    // Update the package.json with the new name and description\n    updatePackageJson(outputDir, name, description);\n\n    return true;\n  } catch (_error) {\n    consola.error(`Failed to use custom template ${customTemplate}: ${_error}`);\n    throw _error;\n  }\n}\n\n/**\n * Create a layer using one of the built-in templates\n */\nfunction createLayerFromTemplate(\n  outputDir: string,\n  name: string,\n  description: string,\n  templateName: string\n) {\n  consola.info(`Creating layer using template: ${pc.cyan(templateName)}`);\n\n  // Get the specified template\n  const template = templates[templateName];\n\n  if (!template) {\n    consola.error(`Template '${templateName}' not found`);\n    process.exit(1);\n  }\n\n  // Create the base layer structure\n  createLayerStructure(outputDir, name, description, template.dependencies);\n\n  // Apply the template-specific files\n  template.createTemplateFiles(outputDir);\n\n  // Run any post-setup functions if provided\n  if (template.postSetup) {\n    template.postSetup(outputDir, name, description);\n  }\n\n  consola.success(`Applied template: ${pc.green(templateName)}`);\n}\n\n/**\n * Update package.json with the new name and description\n */\nfunction updatePackageJson(\n  outputDir: string,\n  name: string,\n  description: string\n) {\n  const packageJsonPath = join(outputDir, 'package.json');\n\n  if (existsSync(packageJsonPath)) {\n    try {\n      const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n\n      packageJson.name = name;\n      packageJson.description = description;\n\n      // Reset version to 0.1.0\n      packageJson.version = '0.1.0';\n\n      writeFileSync(\n        packageJsonPath,\n        JSON.stringify(packageJson, null, 2) + '\\n'\n      );\n\n      consola.success('Updated package.json with new name and description');\n    } catch (_error) {\n      consola.warn(`Could not update package.json: ${_error}`);\n    }\n  } else {\n    consola.warn(\n      'No package.json found in the template. Creating a basic one.'\n    );\n\n    const packageJson = {\n      name,\n      version: '0.1.0',\n      description,\n      type: 'module',\n      main: './nuxt.config.ts',\n      scripts: {\n        dev: 'nuxi dev playground',\n        build: 'nuxi build playground',\n        generate: 'nuxi generate playground',\n        preview: 'nuxi preview playground',\n        lint: 'eslint .',\n        prepare: 'nuxi prepare playground',\n      },\n      dependencies: {},\n      devDependencies: {\n        '@nuxt/module-builder': '^0.5.0',\n        '@nuxt/schema': '^3.7.0',\n        nuxt: '^3.7.0',\n        typescript: '^5.2.2',\n        vitest: '^0.34.3',\n      },\n    };\n\n    writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\\n');\n\n    consola.success('Created new package.json');\n  }\n}\n\n/**\n * Create the base layer structure\n */\nfunction createLayerStructure(\n  outputDir: string,\n  name: string,\n  description: string,\n  dependencies: Record<string, string>\n) {\n  consola.info('Creating layer structure');\n\n  // Create directories\n  mkdirSync(join(outputDir, 'components'), { recursive: true });\n  mkdirSync(join(outputDir, 'composables'), { recursive: true });\n  mkdirSync(join(outputDir, 'utils'), { recursive: true });\n  mkdirSync(join(outputDir, 'plugins'), { recursive: true });\n  mkdirSync(join(outputDir, 'server'), { recursive: true });\n  mkdirSync(join(outputDir, 'runtime'), { recursive: true });\n  mkdirSync(join(outputDir, 'playground'), { recursive: true });\n\n  // Create package.json\n  const packageJson = {\n    name,\n    version: '0.1.0',\n    description,\n    type: 'module',\n    main: './nuxt.config.ts',\n    scripts: {\n      dev: 'nuxi dev playground',\n      build: 'nuxi build playground',\n      generate: 'nuxi generate playground',\n      preview: 'nuxi preview playground',\n      lint: 'eslint .',\n      prepare: 'nuxi prepare playground',\n    },\n    dependencies: {\n      ...dependencies,\n    },\n    devDependencies: {\n      '@nuxt/eslint-config': '^0.2.0',\n      eslint: '^8.49.0',\n      nuxt: '^3.7.4',\n    },\n  };\n\n  writeFileSync(\n    join(outputDir, 'package.json'),\n    JSON.stringify(packageJson, null, 2)\n  );\n\n  // Create README.md\n  const readme = `# ${name}\n\n${description}\n\n## Setup\n\n\\`\\`\\`bash\n# npm\nnpm install ${name}\n\n# yarn\nyarn add ${name}\n\n# pnpm\npnpm add ${name}\n\\`\\`\\`\n\n## Usage\n\nAdd the layer to your \\`nuxt.config.ts\\`:\n\n\\`\\`\\`ts\nexport default defineNuxtConfig({\n  extends: ['${name}']\n})\n\\`\\`\\`\n\n## Development\n\n\\`\\`\\`bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\\`\\`\\`\n`;\n\n  writeFileSync(join(outputDir, 'README.md'), readme);\n\n  // Create playground/app.vue\n  const playgroundApp = `<template>\n  <div>\n    <h1>Welcome to ${name} playground!</h1>\n    <p>This is a playground for testing the ${name} layer.</p>\n  </div>\n</template>\n`;\n\n  writeFileSync(join(outputDir, 'playground', 'app.vue'), playgroundApp);\n\n  // Create playground/nuxt.config.ts\n  const playgroundConfig = `\nexport default defineNuxtConfig({\n  extends: ['..'],\n  // Additional configuration specific to the playground\n})\n`;\n\n  writeFileSync(\n    join(outputDir, 'playground', 'nuxt.config.ts'),\n    playgroundConfig\n  );\n\n  // Create .gitignore\n  const gitignore = `\n# Dependencies\nnode_modules\n\n# Logs\n*.log*\n\n# Temp directories\n.temp\n.tmp\n.cache\n\n# Nuxt\n.nuxt\n.output\n.vercel_build_output\n.build-*\n.env\n.netlify\n\n# Testing\ncoverage\n.nyc_output\n\n# VSCode\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Intellij idea\n*.iml\n.idea\n\n# OSX\n.DS_Store\n.AppleDouble\n.LSOverride\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n`;\n\n  writeFileSync(join(outputDir, '.gitignore'), gitignore);\n\n  consola.success('Layer structure created successfully');\n}\n\n/**\n * Initialize Git repository in the output directory\n */\nfunction initializeGit(outputDir: string) {\n  try {\n    consola.info('Initializing Git repository...');\n    execSync('git init', { cwd: outputDir, stdio: 'ignore' });\n    consola.success('Git repository initialized');\n  } catch (_error) {\n    consola.warn(\n      'Failed to initialize Git repository. Continuing without Git.'\n    );\n  }\n}\n\n/**\n * Install dependencies using the specified package manager\n */\nfunction installDependencies(outputDir: string, packageManager: string) {\n  try {\n    consola.info(`Installing dependencies using ${packageManager}...`);\n\n    let command = '';\n    switch (packageManager) {\n    case 'npm':\n      command = 'npm install';\n      break;\n    case 'yarn':\n      command = 'yarn';\n      break;\n    case 'pnpm':\n      command = 'pnpm install';\n      break;\n    default:\n      command = 'npm install';\n    }\n\n    execSync(command, { cwd: outputDir, stdio: 'inherit' });\n    consola.success('Dependencies installed successfully');\n  } catch (_error) {\n    consola.error(\n      'Failed to install dependencies. You can install them manually later.'\n    );\n  }\n}\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const basicTemplate: TemplateDefinition = {\n  dependencies: {},\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create a basic plugin\n    const pluginContent = `\nexport default defineNuxtPlugin((nuxtApp) => {\n  return {\n    provide: {\n      hello: (msg: string) => \\`Hello \\${msg}!\\`\n    }\n  }\n})\n`;\n\n    // Ensure runtime directory exists\n    mkdirSync(join(outputDir, 'src', 'runtime'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'runtime', 'plugin.ts'),\n      pluginContent\n    );\n\n    // Create a basic component\n    const componentContent = `\n<template>\n  <div class=\"basic-component\">\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// Component logic here\n</script>\n\n<style scoped>\n.basic-component {\n  padding: 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.25rem;\n}\n</style>\n`;\n\n    // Ensure components directory exists\n    mkdirSync(join(outputDir, 'src', 'components'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'components', 'BasicComponent.vue'),\n      componentContent\n    );\n\n    // Create a basic composable\n    const composableContent = `\nexport function useBasic() {\n  const count = ref(0);\n  \n  function increment() {\n    count.value++;\n  }\n  \n  return {\n    count,\n    increment\n  };\n}\n`;\n\n    // Ensure composables directory exists\n    mkdirSync(join(outputDir, 'src', 'composables'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'composables', 'useBasic.ts'),\n      composableContent\n    );\n  },\n};\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const authTemplate: TemplateDefinition = {\n  dependencies: {\n    '@nuxtjs/supabase': '^1.0.2',\n    zod: '^3.21.4',\n  },\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create auth plugin\n    const pluginContent = `\nexport default defineNuxtPlugin((nuxtApp) => {\n  return {\n    provide: {\n      auth: {\n        // Auth utilities here\n      }\n    }\n  }\n})\n`;\n\n    // Ensure runtime directory exists\n    mkdirSync(join(outputDir, 'src', 'runtime'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'runtime', 'plugin.ts'),\n      pluginContent\n    );\n\n    // Create auth login component\n    const loginComponentContent = `\n<template>\n  <div class=\"auth-login\">\n    <h2 class=\"text-xl font-bold mb-4\">Login</h2>\n    <form @submit.prevent=\"handleLogin\">\n      <div class=\"mb-4\">\n        <label class=\"block mb-1\">Email</label>\n        <input\n          type=\"email\"\n          v-model=\"email\"\n          class=\"w-full px-3 py-2 border rounded\"\n          required\n        />\n      </div>\n      <div class=\"mb-4\">\n        <label class=\"block mb-1\">Password</label>\n        <input\n          type=\"password\"\n          v-model=\"password\"\n          class=\"w-full px-3 py-2 border rounded\"\n          required\n        />\n      </div>\n      <button\n        type=\"submit\"\n        class=\"w-full px-4 py-2 bg-blue-500 text-white rounded\"\n        :disabled=\"loading\"\n      >\n        {{ loading ? 'Loading...' : 'Login' }}\n      </button>\n    </form>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst email = ref('');\nconst password = ref('');\nconst loading = ref(false);\n\nconst handleLogin = async () => {\n  try {\n    loading.value = true;\n    // Login logic here\n  } catch (error) {\n    console.error('Login error:', error);\n  } finally {\n    loading.value = false;\n  }\n};\n</script>\n`;\n\n    // Ensure components directory exists\n    mkdirSync(join(outputDir, 'src', 'components'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'components', 'AuthLogin.vue'),\n      loginComponentContent\n    );\n\n    // Create auth composable\n    const composableContent = `\nexport function useAuth() {\n  const user = useState('auth:user', () => null);\n  const loggedIn = computed(() => !!user.value);\n  \n  async function login(email: string, password: string) {\n    // Login implementation\n  }\n  \n  async function logout() {\n    // Logout implementation\n  }\n  \n  return {\n    user,\n    loggedIn,\n    login,\n    logout\n  };\n}\n`;\n\n    // Ensure composables directory exists\n    mkdirSync(join(outputDir, 'src', 'composables'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'composables', 'useAuth.ts'),\n      composableContent\n    );\n  },\n};\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const uiTemplate: TemplateDefinition = {\n  dependencies: {\n    '@nuxtjs/tailwindcss': '^6.8.0',\n  },\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create UI plugin\n    const pluginContent = `\nexport default defineNuxtPlugin((nuxtApp) => {\n  return {\n    provide: {\n      ui: {\n        // UI utilities here\n      }\n    }\n  }\n})\n`;\n\n    // Ensure runtime directory exists\n    mkdirSync(join(outputDir, 'src', 'runtime'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'runtime', 'plugin.ts'),\n      pluginContent\n    );\n\n    // Create button component\n    const buttonComponentContent = `\n<template>\n  <button\n    :class=\"[\n      'ui-button',\n      \\`ui-button--\\${variant}\\`,\n      \\`ui-button--\\${size}\\`,\n      block && 'ui-button--block'\n    ]\"\n    :disabled=\"disabled\"\n    @click=\"$emit('click', $event)\"\n  >\n    <slot />\n  </button>\n</template>\n\n<script setup lang=\"ts\">\ndefineProps({\n  variant: {\n    type: String,\n    default: 'primary',\n    validator: (value: string) => ['primary', 'secondary', 'outline'].includes(value)\n  },\n  size: {\n    type: String,\n    default: 'md',\n    validator: (value: string) => ['sm', 'md', 'lg'].includes(value)\n  },\n  block: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  }\n});\n\ndefineEmits(['click']);\n</script>\n\n<style>\n.ui-button {\n  @apply inline-flex items-center justify-center rounded font-medium transition-colors;\n}\n\n.ui-button--primary {\n  @apply bg-blue-500 text-white hover:bg-blue-600;\n}\n\n.ui-button--secondary {\n  @apply bg-gray-200 text-gray-800 hover:bg-gray-300;\n}\n\n.ui-button--outline {\n  @apply bg-transparent border border-gray-300 hover:bg-gray-100;\n}\n\n.ui-button--sm {\n  @apply px-3 py-1.5 text-sm;\n}\n\n.ui-button--md {\n  @apply px-4 py-2;\n}\n\n.ui-button--lg {\n  @apply px-5 py-2.5 text-lg;\n}\n\n.ui-button--block {\n  @apply w-full;\n}\n\n.ui-button:disabled {\n  @apply opacity-50 cursor-not-allowed;\n}\n</style>\n`;\n\n    // Ensure components directory exists\n    mkdirSync(join(outputDir, 'src', 'components'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'components', 'Button.vue'),\n      buttonComponentContent\n    );\n\n    // Create UI theme composable\n    const composableContent = `\nexport function useTheme() {\n  const isDark = useState('ui:dark', () => false);\n  \n  function toggleTheme() {\n    isDark.value = !isDark.value;\n  }\n  \n  return {\n    isDark,\n    toggleTheme\n  };\n}\n`;\n\n    // Ensure composables directory exists\n    mkdirSync(join(outputDir, 'src', 'composables'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'composables', 'useTheme.ts'),\n      composableContent\n    );\n  },\n};\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const apiTemplate: TemplateDefinition = {\n  dependencies: {\n    h3: '^1.7.1',\n    ofetch: '^1.3.3',\n  },\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create API plugin\n    const pluginContent = `\nimport { $fetch } from 'ofetch';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const config = useRuntimeConfig();\n  \n  const apiFetch = $fetch.create({\n    baseURL: config.public.apiBaseUrl || '/api',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    credentials: 'include',\n  });\n  \n  return {\n    provide: {\n      api: apiFetch\n    }\n  }\n})\n`;\n\n    // Ensure runtime directory exists\n    mkdirSync(join(outputDir, 'src', 'runtime'), { recursive: true });\n    writeFileSync(\n      join(outputDir, 'src', 'runtime', 'plugin.ts'),\n      pluginContent\n    );\n\n    // Create API endpoint files\n    mkdirSync(join(outputDir, 'src', 'runtime', 'server', 'api'), {\n      recursive: true,\n    });\n\n    const apiEndpointContent = `\nimport { defineEventHandler } from 'h3';\n\nexport default defineEventHandler(async (event) => {\n  return {\n    message: 'API endpoint is working!'\n  };\n});\n`;\n\n    writeFileSync(\n      join(outputDir, 'src', 'runtime', 'server', 'api', 'hello.ts'),\n      apiEndpointContent\n    );\n\n    // Create API composable\n    mkdirSync(join(outputDir, 'src', 'composables'), { recursive: true });\n    const composableContent = `\nexport function useApi() {\n  const { $api } = useNuxtApp();\n  \n  async function fetchData(endpoint: string, options = {}) {\n    return await $api(endpoint, options);\n  }\n  \n  return {\n    fetchData\n  };\n}\n`;\n\n    writeFileSync(\n      join(outputDir, 'src', 'composables', 'useApi.ts'),\n      composableContent\n    );\n  },\n};\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const convexTemplate: TemplateDefinition = {\n  dependencies: {\n    '@convex-vue/core': '^0.0.4',\n    '@vueuse/core': '^10.7.0',\n    convex: '^1.5.0',\n  },\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create Convex plugin\n    const pluginContent = `\nimport { defineNuxtPlugin } from '#app';\nimport { createConvexVue } from '@convex-vue/core';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const config = useRuntimeConfig();\n  \n  if (!config.public.convex?.url) {\n    console.warn('CONVEX_URL is not set. Convex client will not be initialized properly.');\n    return;\n  }\n  \n  // Create Convex Vue integration\n  const convexVue = createConvexVue({\n    convexUrl: config.public.convex.url,\n  });\n  \n  // Use the Convex Vue plugin\n  nuxtApp.vueApp.use(convexVue);\n});\n`;\n\n    // Ensure plugins directory exists\n    mkdirSync(join(outputDir, 'plugins'), { recursive: true });\n    writeFileSync(join(outputDir, 'plugins', 'convex.ts'), pluginContent);\n\n    // Create Convex directory structure\n    mkdirSync(join(outputDir, 'convex'), { recursive: true });\n    mkdirSync(join(outputDir, 'convex', '_generated'), { recursive: true });\n    mkdirSync(join(outputDir, 'convex', 'schema'), { recursive: true });\n\n    // Create schema.ts\n    const schemaContent = `\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  tasks: defineTable({\n    text: v.string(),\n    isCompleted: v.boolean(),\n    userId: v.optional(v.string()),\n    createdAt: v.number(),\n  }),\n  users: defineTable({\n    name: v.string(),\n    email: v.string(),\n    tokenIdentifier: v.string(),\n  }).index(\"by_token\", [\"tokenIdentifier\"]),\n});\n`;\n\n    writeFileSync(join(outputDir, 'convex', 'schema.ts'), schemaContent);\n\n    // Create tasks.ts (queries)\n    const queriesContent = `\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const get = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query(\"tasks\").order(\"desc\").collect();\n  },\n});\n\nexport const getById = query({\n  args: { id: v.id(\"tasks\") },\n  handler: async (ctx, args) => {\n    return await ctx.db.get(args.id);\n  },\n});\n\nexport const getByUser = query({\n  args: { userId: v.optional(v.string()) },\n  handler: async (ctx, args) => {\n    if (!args.userId) {\n      return await ctx.db.query(\"tasks\").collect();\n    }\n    return await ctx.db\n      .query(\"tasks\")\n      .filter((q) => q.eq(q.field(\"userId\"), args.userId))\n      .collect();\n  },\n});\n`;\n\n    writeFileSync(join(outputDir, 'convex', 'tasks.ts'), queriesContent);\n\n    // Create mutations.ts\n    const mutationsContent = `\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const create = mutation({\n  args: { text: v.string(), userId: v.optional(v.string()) },\n  handler: async (ctx, args) => {\n    const taskId = await ctx.db.insert(\"tasks\", {\n      text: args.text,\n      isCompleted: false,\n      userId: args.userId ?? \"anonymous\",\n      createdAt: Date.now(),\n    });\n    return taskId;\n  },\n});\n\nexport const toggleComplete = mutation({\n  args: { id: v.id(\"tasks\") },\n  handler: async (ctx, args) => {\n    const task = await ctx.db.get(args.id);\n    if (!task) {\n      throw new Error(\"Task not found\");\n    }\n    \n    await ctx.db.patch(args.id, {\n      isCompleted: !task.isCompleted,\n    });\n  },\n});\n\nexport const remove = mutation({\n  args: { id: v.id(\"tasks\") },\n  handler: async (ctx, args) => {\n    await ctx.db.delete(args.id);\n  },\n});\n`;\n\n    writeFileSync(join(outputDir, 'convex', 'mutations.ts'), mutationsContent);\n\n    // Create components\n    mkdirSync(join(outputDir, 'components'), { recursive: true });\n\n    // Create ConvexTaskList.vue\n    const taskListComponent = `\n<script setup>\nimport { useConvexQuery, useConvexMutation } from '@convex-vue/core';\nimport { api } from '../convex/_generated/api';\n\nconst { data: tasks, isLoading } = useConvexQuery(api.tasks.get);\nconst toggleComplete = useConvexMutation(api.mutations.toggleComplete);\nconst removeTask = useConvexMutation(api.mutations.remove);\n\nconst handleToggle = (id) => {\n  toggleComplete.mutate({ id });\n};\n\nconst handleDelete = (id) => {\n  removeTask.mutate({ id });\n};\n</script>\n\n<template>\n  <div>\n    <h2 class=\"text-xl font-bold mb-4\">Tasks</h2>\n    <div v-if=\"isLoading\">Loading tasks...</div>\n    <div v-else-if=\"!tasks || tasks.length === 0\">No tasks yet.</div>\n    <ul v-else class=\"space-y-2\">\n      <li v-for=\"task in tasks\" :key=\"task._id\" class=\"flex items-center gap-2 p-2 border rounded\">\n        <input \n          type=\"checkbox\" \n          :checked=\"task.isCompleted\" \n          @change=\"handleToggle(task._id)\" \n        />\n        <span :class=\"{ 'line-through': task.isCompleted }\">{{ task.text }}</span>\n        <button @click=\"handleDelete(task._id)\" class=\"ml-auto text-red-500\">Delete</button>\n      </li>\n    </ul>\n  </div>\n</template>\n`;\n\n    writeFileSync(\n      join(outputDir, 'components', 'ConvexTaskList.vue'),\n      taskListComponent\n    );\n\n    // Create ConvexTaskForm.vue\n    const taskFormComponent = `\n<script setup>\nimport { ref } from 'vue';\nimport { useConvexMutation } from '@convex-vue/core';\nimport { api } from '../convex/_generated/api';\n\nconst taskText = ref('');\nconst createTask = useConvexMutation(api.mutations.create);\n\nconst addTask = () => {\n  if (!taskText.value.trim()) return;\n  \n  createTask.mutate({ text: taskText.value })\n    .then(() => {\n      taskText.value = '';\n    })\n    .catch(error => {\n      console.error('Failed to create task:', error);\n    });\n};\n</script>\n\n<template>\n  <form @submit.prevent=\"addTask\" class=\"flex gap-2 mb-4\">\n    <input \n      v-model=\"taskText\" \n      type=\"text\" \n      placeholder=\"Add a new task...\" \n      class=\"flex-1 p-2 border rounded\"\n      :disabled=\"createTask.isLoading\"\n    />\n    <button \n      type=\"submit\" \n      class=\"px-4 py-2 bg-blue-500 text-white rounded\" \n      :disabled=\"createTask.isLoading || !taskText.trim()\"\n    >\n      {{ createTask.isLoading ? 'Adding...' : 'Add' }}\n    </button>\n  </form>\n</template>\n`;\n\n    writeFileSync(\n      join(outputDir, 'components', 'ConvexTaskForm.vue'),\n      taskFormComponent\n    );\n\n    // Create ConvexDemo.vue\n    const demoComponent = `\n<script setup>\n// Main demo component that combines the task form and list\n</script>\n\n<template>\n  <div class=\"p-4 border rounded max-w-lg mx-auto my-8\">\n    <h1 class=\"text-2xl font-bold mb-4\">Convex Tasks Demo</h1>\n    <ConvexTaskForm />\n    <ConvexTaskList />\n  </div>\n</template>\n`;\n\n    writeFileSync(\n      join(outputDir, 'components', 'ConvexDemo.vue'),\n      demoComponent\n    );\n\n    // Create composables\n    mkdirSync(join(outputDir, 'composables'), { recursive: true });\n\n    // Create useConvexTasks.ts\n    const tasksComposable = `\nimport { useConvexQuery, useConvexMutation } from '@convex-vue/core';\nimport { api } from '../convex/_generated/api';\nimport { ref, computed } from 'vue';\n\nexport function useConvexTasks() {\n  const { data: tasks, isLoading } = useConvexQuery(api.tasks.get);\n  const createTask = useConvexMutation(api.mutations.create);\n  const toggleComplete = useConvexMutation(api.mutations.toggleComplete);\n  const removeTask = useConvexMutation(api.mutations.remove);\n  \n  const newTaskText = ref('');\n  \n  const completedTasks = computed(() => \n    tasks.value?.filter(task => task.isCompleted) || []\n  );\n  \n  const pendingTasks = computed(() => \n    tasks.value?.filter(task => !task.isCompleted) || []\n  );\n  \n  const addTask = async () => {\n    if (!newTaskText.value.trim()) return;\n    \n    await createTask.mutate({ text: newTaskText.value });\n    newTaskText.value = '';\n  };\n  \n  return {\n    tasks,\n    isLoading,\n    newTaskText,\n    completedTasks,\n    pendingTasks,\n    addTask,\n    toggleTask: (id) => toggleComplete.mutate({ id }),\n    deleteTask: (id) => removeTask.mutate({ id }),\n  };\n}\n`;\n\n    writeFileSync(\n      join(outputDir, 'composables', 'useConvexTasks.ts'),\n      tasksComposable\n    );\n\n    // Create useConvexAuth.ts\n    const authComposable = `\nimport { ref } from 'vue';\n\nexport function useConvexAuth() {\n  const user = ref(null);\n  const isLoading = ref(true);\n  const error = ref(null);\n\n  // This is a simplified version - in a real app you would integrate with an auth provider\n  \n  return {\n    user,\n    isLoading,\n    error,\n    login: () => {\n      // Implement login logic\n    },\n    logout: () => {\n      // Implement logout logic\n    }\n  };\n}\n`;\n\n    writeFileSync(\n      join(outputDir, 'composables', 'useConvexAuth.ts'),\n      authComposable\n    );\n\n    // Create SETUP.md\n    const setupGuideMd = `# Setting up Convex with Nuxt\n\nThis guide will help you set up and use Convex with your Nuxt application.\n\n## Prerequisites\n\n1. Create a Convex account at [convex.dev](https://convex.dev)\n2. Install the Convex CLI: \\`npm install -g convex\\`\n\n## Getting Started\n\n### 1. Initialize your Convex project\n\n\\`\\`\\`bash\nnpx convex init\n\\`\\`\\`\n\nThis will create a Convex deployment and provide you with a deployment URL.\n\n### 2. Set up your environment variables\n\nCreate a \\`.env\\` file in your project root:\n\n\\`\\`\\`\nCONVEX_URL=your_deployment_url_here\n\\`\\`\\`\n\n### 3. Push your schema to Convex\n\n\\`\\`\\`bash\nnpx convex push\n\\`\\`\\`\n\n## Working with Convex\n\n### Using the composables\n\n\\`\\`\\`vue\n<script setup>\nimport { useConvexQuery, useConvexMutation } from '@convex-vue/core';\nimport { api } from '../convex/_generated/api';\n\n// Query data\nconst { data: tasks } = useConvexQuery(api.tasks.get);\n\n// Mutate data\nconst createTask = useConvexMutation(api.mutations.create);\ncreateTask.mutate({ text: 'New task' });\n</script>\n\\`\\`\\`\n\n### Adding authentication\n\nConvex works with various auth providers like Clerk, Auth0, and more. Check the Convex documentation for integration guides.\n\n## Additional Resources\n\n- [Convex Documentation](https://docs.convex.dev)\n- [Convex + Vue Guide](https://docs.convex.dev/vue)\n- [Convex Discord Community](https://discord.com/invite/convex)\n`;\n\n    mkdirSync(join(outputDir, 'docs'), { recursive: true });\n    writeFileSync(join(outputDir, 'docs', 'SETUP.md'), setupGuideMd);\n  },\n\n  postSetup: (outputDir: string, name: string, description: string) => {\n    // Update nuxt.config.ts to include Convex setup\n    const nuxtConfig = `\nexport default defineNuxtConfig({\n  // Layer configuration\n  runtimeConfig: {\n    // Runtime configuration for the layer\n    public: {\n      convex: {\n        // Public runtime configuration\n        url: process.env.CONVEX_URL || '',\n      }\n    }\n  },\n  \n  // Auto-import components\n  components: [\n    { path: './components' }\n  ],\n  \n  // Add Convex plugin\n  plugins: [\n    './plugins/convex'\n  ],\n  \n  // Additional modules or configuration\n  modules: []\n})`;\n\n    writeFileSync(join(outputDir, 'nuxt.config.ts'), nuxtConfig);\n\n    // Create convex.json\n    const convexConfig = {\n      project: name.replace(/^nuxt-/, ''),\n      functions: './convex',\n      origin: 'https://relaxed-swan-82.convex.cloud',\n    };\n\n    writeFileSync(\n      join(outputDir, 'convex.json'),\n      JSON.stringify(convexConfig, null, 2)\n    );\n\n    // Update README.md with Convex-specific instructions\n    const readmeMd = `# ${name}\n\n${description}\n\n## Features\n\n- Seamless integration with Convex backend\n- Ready-to-use components for common Convex operations\n- Composables for querying and mutating Convex data\n- Authentication helpers\n\n## Setup\n\n\\`\\`\\`bash\n# npm\nnpm install ${name}\n\n# yarn\nyarn add ${name}\n\n# pnpm\npnpm add ${name}\n\\`\\`\\`\n\n## Usage\n\nAdd the layer to your \\`nuxt.config.ts\\`:\n\n\\`\\`\\`ts\nexport default defineNuxtConfig({\n  extends: ['${name}']\n})\n\\`\\`\\`\n\n### Environment Variables\n\nCreate a \\`.env\\` file with your Convex deployment URL:\n\n\\`\\`\\`\nCONVEX_URL=your_deployment_url_here\n\\`\\`\\`\n\n### Initialize Convex\n\n\\`\\`\\`bash\nnpx convex init\nnpx convex push\n\\`\\`\\`\n\n## Components\n\nThis layer provides the following components:\n\n- \\`ConvexTaskList\\`: Display a list of tasks from Convex\n- \\`ConvexTaskForm\\`: Form for creating new tasks\n- \\`ConvexDemo\\`: Complete demo combining the above components\n\n## Composables\n\n- \\`useConvexTasks\\`: Comprehensive composable for task management\n- \\`useConvexAuth\\`: Handle authentication with Convex\n\n## Development\n\n\\`\\`\\`bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\\`\\`\\`\n\nSee the [Convex documentation](https://docs.convex.dev) for more information.\n`;\n\n    writeFileSync(join(outputDir, 'README.md'), readmeMd);\n  },\n};\n","import { join } from 'pathe';\nimport { writeFileSync, mkdirSync, readFileSync } from 'fs';\nimport { TemplateDefinition } from './index';\n\nexport const neonTemplate: TemplateDefinition = {\n  dependencies: {\n    '@neondatabase/serverless': '^0.6.0',\n    pg: '^8.11.3',\n    'drizzle-orm': '^0.28.6',\n    'drizzle-kit': '^0.19.13',\n    dotenv: '^16.3.1',\n  },\n\n  createTemplateFiles: (outputDir: string) => {\n    // Create Neon plugin\n    const pluginContent = `\nimport { defineNuxtPlugin } from '#app';\nimport { Pool } from 'pg';\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const config = useRuntimeConfig();\n  \n  if (!config.neon || !config.neon.connectionString) {\n    console.warn('NEON_CONNECTION_STRING is not set. Neon database will not be initialized properly.');\n    return;\n  }\n  \n  // Create a connection pool\n  const sql = neon(config.neon.connectionString);\n  const db = drizzle(sql);\n  \n  // Provide the database client to the application\n  return {\n    provide: {\n      neonDb: db,\n      neonSql: sql,\n    }\n  };\n});\n`;\n\n    // Ensure plugins directory exists\n    mkdirSync(join(outputDir, 'plugins'), { recursive: true });\n    writeFileSync(join(outputDir, 'plugins', 'neon.ts'), pluginContent);\n\n    // Create db directory structure\n    mkdirSync(join(outputDir, 'db'), { recursive: true });\n    mkdirSync(join(outputDir, 'db', 'schema'), { recursive: true });\n\n    // Create db/index.ts\n    const dbIndexContent = `\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport * as schema from './schema/schema';\n\n// For client-side usage, import and use this\nexport const createNeonClient = (connectionString: string) => {\n  const sql = neon(connectionString);\n  return drizzle(sql, { schema });\n};\n\n// For server-side usage in Nuxt server routes\nexport const createPoolClient = (connectionString: string) => {\n  const { Pool } = require('pg');\n  const pool = new Pool({ connectionString });\n  return pool;\n};\n`;\n\n    writeFileSync(join(outputDir, 'db', 'index.ts'), dbIndexContent);\n\n    // Create db/schema/schema.ts\n    const schemaContent = `\nimport { pgTable, serial, text, timestamp, integer, boolean } from 'drizzle-orm/pg-core';\n\n// Example User table\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  email: text('email').notNull().unique(),\n  password: text('password').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Example Post table\nexport const posts = pgTable('posts', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  published: boolean('published').default(false).notNull(),\n  authorId: integer('author_id').references(() => users.id).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n`;\n\n    writeFileSync(join(outputDir, 'db', 'schema', 'schema.ts'), schemaContent);\n\n    // Create drizzle.config.ts\n    const drizzleConfigContent = `\nimport type { Config } from 'drizzle-kit';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\nexport default {\n  schema: './db/schema/*',\n  out: './drizzle',\n  driver: 'pg',\n  dbCredentials: {\n    connectionString: process.env.NEON_CONNECTION_STRING || '',\n  },\n} satisfies Config;\n`;\n\n    writeFileSync(join(outputDir, 'drizzle.config.ts'), drizzleConfigContent);\n\n    // Create server directory\n    mkdirSync(join(outputDir, 'server'), { recursive: true });\n    mkdirSync(join(outputDir, 'server', 'api'), { recursive: true });\n\n    // Create server/api/db-status.ts\n    const dbStatusApiContent = `\nimport { createPoolClient } from '../../db';\n\nexport default defineEventHandler(async (event) => {\n  const config = useRuntimeConfig();\n  \n  if (!config.neon?.connectionString) {\n    return {\n      status: 'error',\n      message: 'Database connection string not configured'\n    };\n  }\n  \n  try {\n    const pool = createPoolClient(config.neon.connectionString);\n    const client = await pool.connect();\n    \n    try {\n      const result = await client.query('SELECT NOW()');\n      return {\n        status: 'connected',\n        timestamp: result.rows[0].now,\n        message: 'Successfully connected to Neon database'\n      };\n    } finally {\n      client.release();\n    }\n  } catch (error) {\n    return {\n      status: 'error',\n      message: \\`Failed to connect to database: \\${error.message}\\`\n    };\n  }\n});\n`;\n\n    writeFileSync(\n      join(outputDir, 'server', 'api', 'db-status.ts'),\n      dbStatusApiContent\n    );\n\n    // Create server/config.ts\n    const serverConfigContent = `\nimport { createPoolClient } from '../db';\n\nexport const useNeonPool = () => {\n  const config = useRuntimeConfig();\n  \n  if (!config.neon?.connectionString) {\n    throw new Error('NEON_CONNECTION_STRING is not configured');\n  }\n  \n  return createPoolClient(config.neon.connectionString);\n};\n`;\n\n    writeFileSync(join(outputDir, 'server', 'config.ts'), serverConfigContent);\n\n    // Create scripts directory\n    mkdirSync(join(outputDir, 'scripts'), { recursive: true });\n\n    // Create scripts/setup-db.ts\n    const setupDbContent = `\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { migrate } from 'drizzle-orm/neon-serverless/migrator';\nimport * as dotenv from 'dotenv';\nimport * as schema from '../db/schema/schema';\n\ndotenv.config();\n\nasync function main() {\n  const connectionString = process.env.NEON_CONNECTION_STRING;\n  \n  if (!connectionString) {\n    console.error('NEON_CONNECTION_STRING is not set');\n    process.exit(1);\n  }\n  \n  console.log('Connecting to Neon database...');\n  const sql = neon(connectionString);\n  const db = drizzle(sql, { schema });\n  \n  console.log('Running migrations...');\n  // Uncomment when you have migrations\n  // await migrate(db, { migrationsFolder: './drizzle' });\n  \n  console.log('Inserting sample data...');\n  \n  // Insert sample users\n  const users = await db.insert(schema.users).values([\n    {\n      name: 'John Doe',\n      email: 'john@example.com',\n      password: 'password123', // In a real app, hash this!\n    },\n    {\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      password: 'password456', // In a real app, hash this!\n    },\n  ]).returning();\n  \n  console.log('Inserted users:', users);\n  \n  // Insert sample posts\n  const posts = await db.insert(schema.posts).values([\n    {\n      title: 'Getting Started with Neon',\n      content: 'Neon is a serverless PostgreSQL database that scales automatically.',\n      published: true,\n      authorId: users[0].id,\n    },\n    {\n      title: 'Using Drizzle ORM with Neon',\n      content: 'Drizzle ORM provides a type-safe way to interact with your database.',\n      published: true,\n      authorId: users[0].id,\n    },\n    {\n      title: 'Draft Post',\n      content: 'This is a draft post that is not published yet.',\n      published: false,\n      authorId: users[1].id,\n    },\n  ]).returning();\n  \n  console.log('Inserted posts:', posts);\n  \n  console.log('Database setup complete!');\n  process.exit(0);\n}\n\nmain().catch((error) => {\n  console.error('Error setting up database:', error);\n  process.exit(1);\n});\n`;\n\n    writeFileSync(join(outputDir, 'scripts', 'setup-db.ts'), setupDbContent);\n\n    // Create composables directory\n    mkdirSync(join(outputDir, 'composables'), { recursive: true });\n\n    // Create composables/useNeonDb.ts\n    const neonDbComposable = `\nimport { useNuxtApp } from '#app';\nimport { ref, computed } from 'vue';\n\nexport function useNeonDb() {\n  const { $neonDb, $neonSql } = useNuxtApp();\n  \n  if (!$neonDb || !$neonSql) {\n    console.warn('Neon database client not available. Make sure NEON_CONNECTION_STRING is set.');\n  }\n  \n  return {\n    db: $neonDb,\n    sql: $neonSql,\n    \n    // Helper function to execute a query with error handling\n    async query(queryFn) {\n      try {\n        return {\n          data: await queryFn($neonDb),\n          error: null\n        };\n      } catch (error) {\n        console.error('Database query error:', error);\n        return {\n          data: null,\n          error\n        };\n      }\n    }\n  };\n}\n`;\n\n    writeFileSync(\n      join(outputDir, 'composables', 'useNeonDb.ts'),\n      neonDbComposable\n    );\n\n    // Create components directory\n    mkdirSync(join(outputDir, 'components'), { recursive: true });\n\n    // Create components/NeonUsersList.vue\n    const usersListComponent = `\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useNeonDb } from '../composables/useNeonDb';\n\nconst { db, query } = useNeonDb();\nconst users = ref([]);\nconst loading = ref(true);\nconst error = ref(null);\n\nonMounted(async () => {\n  try {\n    const result = await query(db => db.query.users.findMany());\n    if (result.error) {\n      error.value = result.error;\n    } else {\n      users.value = result.data;\n    }\n  } catch (err) {\n    error.value = err;\n  } finally {\n    loading.value = false;\n  }\n});\n</script>\n\n<template>\n  <div>\n    <h2 class=\"text-xl font-bold mb-4\">Users</h2>\n    <div v-if=\"loading\">Loading users...</div>\n    <div v-else-if=\"error\">Error: {{ error.message }}</div>\n    <div v-else-if=\"users.length === 0\">No users found.</div>\n    <ul v-else class=\"space-y-2\">\n      <li v-for=\"user in users\" :key=\"user.id\" class=\"p-3 border rounded\">\n        <div class=\"font-bold\">{{ user.name }}</div>\n        <div class=\"text-gray-600\">{{ user.email }}</div>\n      </li>\n    </ul>\n  </div>\n</template>\n`;\n\n    writeFileSync(\n      join(outputDir, 'components', 'NeonUsersList.vue'),\n      usersListComponent\n    );\n\n    // Create .env.example\n    const envExampleContent = `# Neon Database\nNEON_CONNECTION_STRING=postgres://user:password@host/database\n`;\n\n    writeFileSync(join(outputDir, '.env.example'), envExampleContent);\n\n    // Create README.md with Neon setup instructions\n    const setupGuideMd = `# Setting up Neon Database with Nuxt\n\nThis guide will help you set up and use a Neon serverless Postgres database with your Nuxt application.\n\n## Prerequisites\n\n1. Create a Neon account at [neon.tech](https://neon.tech)\n2. Create a new project in your Neon dashboard\n\n## Getting Started\n\n### 1. Install the neonctl CLI\n\n\\`\\`\\`bash\n# Using npm\nnpm install -g neonctl\n\n# Using Homebrew (macOS)\nbrew install -g neonctl\n\\`\\`\\`\n\n### 2. Authenticate with Neon\n\n\\`\\`\\`bash\nneon auth\n\\`\\`\\`\n\n### 3. Create a dedicated branch for development\n\n\\`\\`\\`bash\nneon branches create --name dev/myname\n\\`\\`\\`\n\n### 4. Get your connection string\n\n\\`\\`\\`bash\nneon connection-string dev/myname\n\\`\\`\\`\n\n### 5. Set up your environment variables\n\nCreate a \\`.env\\` file in your project root with:\n\n\\`\\`\\`\nNEON_CONNECTION_STRING=your_connection_string_here\n\\`\\`\\`\n\n### 6. Initialize your database\n\n\\`\\`\\`bash\nnpx tsx src/scripts/setup-db.ts\n\\`\\`\\`\n\n## Working with the database\n\n### Using the composable\n\n\\`\\`\\`vue\n<script setup>\nimport { useNeonDb } from '../composables/useNeonDb';\n\nconst { db, query } = useNeonDb();\n\n// Example query\nconst fetchUsers = async () => {\n  const result = await query(db => db.query.users.findMany());\n  const users = await db.query.users.findMany();\n};\n</script>\n\\`\\`\\`\n\n### Schema migrations with Drizzle\n\n1. Make changes to your schema files in \\`db/schema/\\`.\n\n2. Generate migrations:\n\n\\`\\`\\`bash\nnpx drizzle-kit generate\n\\`\\`\\`\n\n3. Apply migrations:\n\n\\`\\`\\`bash\nnpx drizzle-kit push\n\\`\\`\\`\n\n## Additional Resources\n\n- [Neon Documentation](https://neon.tech/docs)\n- [Drizzle ORM Documentation](https://orm.drizzle.team)\n- [Neon + Node.js Guide](https://neon.tech/docs/guides/node)\n`;\n\n    mkdirSync(join(outputDir, 'docs'), { recursive: true });\n    writeFileSync(join(outputDir, 'docs', 'SETUP.md'), setupGuideMd);\n  },\n\n  postSetup: (outputDir: string, name: string, description: string) => {\n    // Update nuxt.config.ts to include Neon runtime config\n    const nuxtConfig = `\nexport default defineNuxtConfig({\n  // Layer configuration\n  runtimeConfig: {\n    // Runtime configuration for the layer\n    neon: {\n      // Private runtime configuration\n      connectionString: process.env.NEON_CONNECTION_STRING || '',\n    }\n  },\n  \n  // Auto-import components\n  components: [\n    { path: './components' }\n  ],\n  \n  // Add Neon plugin\n  plugins: [\n    './plugins/neon'\n  ],\n  \n  // Additional modules or configuration\n  modules: []\n})`;\n\n    writeFileSync(join(outputDir, 'nuxt.config.ts'), nuxtConfig);\n\n    // Update package.json with scripts for database management\n    const packageJsonPath = join(outputDir, 'package.json');\n    try {\n      const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf8'));\n\n      packageJson.scripts = {\n        ...packageJson.scripts,\n        'db:generate': 'drizzle-kit generate',\n        'db:push': 'drizzle-kit push',\n        'db:studio': 'drizzle-kit studio',\n        'db:setup': 'tsx scripts/setup-db.ts',\n      };\n\n      writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n    } catch (error) {\n      console.error('Failed to update package.json:', error);\n    }\n\n    // Update README.md with Neon-specific instructions\n    const readmeMd = `# ${name}\n\n${description}\n\n## Features\n\n- Serverless PostgreSQL database integration with Neon\n- Type-safe database access with Drizzle ORM\n- Ready-to-use components for database operations\n- Server API endpoints for database access\n- Database migration and seeding utilities\n\n## Setup\n\n\\`\\`\\`bash\n# npm\nnpm install ${name}\n\n# yarn\nyarn add ${name}\n\n# pnpm\npnpm add ${name}\n\\`\\`\\`\n\n## Usage\n\nAdd the layer to your \\`nuxt.config.ts\\`:\n\n\\`\\`\\`ts\nexport default defineNuxtConfig({\n  extends: ['${name}']\n})\n\\`\\`\\`\n\n### Environment Variables\n\nCreate a \\`.env\\` file with your Neon connection string:\n\n\\`\\`\\`\nNEON_CONNECTION_STRING=postgres://user:password@host/database\n\\`\\`\\`\n\n### Initialize Database\n\n\\`\\`\\`bash\n# Set up the database with sample data\nnpm run db:setup\n\n# Generate migrations\nnpm run db:generate\n\n# Apply migrations\nnpm run db:push\n\n# Open Drizzle Studio to manage your database\nnpm run db:studio\n\\`\\`\\`\n\n## Components\n\nThis layer provides the following components:\n\n- \\`NeonUsersList\\`: Display a list of users from the database\n\n## Composables\n\n- \\`useNeonDb\\`: Access the Neon database client\n\n## Development\n\n\\`\\`\\`bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\\`\\`\\`\n\nSee the [Neon documentation](https://neon.tech/docs) for more information.\n`;\n\n    writeFileSync(join(outputDir, 'README.md'), readmeMd);\n  },\n};\n","// Template definitions\nexport interface TemplateDefinition {\n  // Function to create the template files\n  createTemplateFiles: (outputDir: string) => void;\n\n  // Dependencies to add to package.json\n  dependencies: Record<string, string>;\n\n  // Additional setup to be done after template creation\n  postSetup?: (outputDir: string, name: string, description: string) => void;\n}\n\n// Template implementations\nimport { basicTemplate } from './basic';\nimport { authTemplate } from './auth';\nimport { uiTemplate } from './ui';\nimport { apiTemplate } from './api';\nimport { convexTemplate } from './convex';\nimport { neonTemplate } from './neon';\n\n// Export all templates\nexport const templates: Record<string, TemplateDefinition> = {\n  basic: basicTemplate,\n  auth: authTemplate,\n  ui: uiTemplate,\n  api: apiTemplate,\n  convex: convexTemplate,\n  neon: neonTemplate,\n};\n\n// Helper to get template names for CLI options\nexport function getTemplateNames(): string[] {\n  return Object.keys(templates);\n}\n","import prompts from 'prompts';\nimport pc from 'picocolors';\n\n/**\n * Utility functions for interactive prompts using the prompts package\n */\n\n/**\n * Create an interactive selection menu\n * @param options Array of options to select from\n * @param message Prompt message\n * @param descriptions Optional descriptions for each option\n * @returns Selected option or null if cancelled\n */\nexport async function selectFromOptions<T extends string>(\n  options: T[],\n  message: string = 'Select an option:',\n  descriptions?: Record<string, string>\n): Promise<T | null> {\n  if (options.length === 0) {\n    return null;\n  }\n\n  const choices = options.map((option) => ({\n    title: option,\n    description: descriptions?.[option] || undefined,\n    value: option,\n  }));\n\n  try {\n    const response = await prompts(\n      {\n        type: 'select',\n        name: 'value',\n        message,\n        choices,\n        hint: 'Use arrow keys and press Enter to select',\n        initial: 0,\n      },\n      {\n        onCancel: () => {\n          throw new Error('Operation cancelled');\n        },\n      }\n    );\n\n    return response.value;\n  } catch (_error) {\n    return null;\n  }\n}\n\n/**\n * Prompt for text input\n * @param message Prompt message\n * @param defaultValue Optional default value\n * @param validate Optional validation function\n * @returns Input value or null if cancelled\n */\nexport async function promptText(\n  message: string,\n  defaultValue?: string,\n  validate?: (value: string) => boolean | string\n): Promise<string | null> {\n  try {\n    const response = await prompts(\n      {\n        type: 'text',\n        name: 'value',\n        message,\n        initial: defaultValue,\n        validate,\n      },\n      {\n        onCancel: () => {\n          throw new Error('Operation cancelled');\n        },\n      }\n    );\n\n    return response.value;\n  } catch (_error) {\n    return null;\n  }\n}\n\n/**\n * Prompt for confirmation\n * @param message Prompt message\n * @param defaultValue Optional default value (true/false)\n * @returns Boolean response or null if cancelled\n */\nexport async function promptConfirm(\n  message: string,\n  defaultValue: boolean = false\n): Promise<boolean | null> {\n  try {\n    const response = await prompts(\n      {\n        type: 'confirm',\n        name: 'value',\n        message,\n        initial: defaultValue,\n      },\n      {\n        onCancel: () => {\n          throw new Error('Operation cancelled');\n        },\n      }\n    );\n\n    return response.value;\n  } catch (_error) {\n    return null;\n  }\n}\n\n/**\n * Prompt for multiple selections\n * @param options Array of options to select from\n * @param message Prompt message\n * @param descriptions Optional descriptions for each option\n * @returns Array of selected options or null if cancelled\n */\nexport async function promptMultiSelect<T extends string>(\n  options: T[],\n  message: string = 'Select options:',\n  descriptions?: Record<string, string>\n): Promise<T[] | null> {\n  if (options.length === 0) {\n    return [];\n  }\n\n  const choices = options.map((option) => ({\n    title: option,\n    description: descriptions?.[option] || undefined,\n    value: option,\n  }));\n\n  try {\n    const response = await prompts(\n      {\n        type: 'multiselect',\n        name: 'value',\n        message,\n        choices,\n        hint: 'Space to select, Enter to confirm',\n        instructions: false,\n      },\n      {\n        onCancel: () => {\n          throw new Error('Operation cancelled');\n        },\n      }\n    );\n\n    return response.value;\n  } catch (_error) {\n    return null;\n  }\n}\n\n/**\n * Display a spinner with a message\n * This is a placeholder - for actual implementation, consider using a package like ora\n * @param message Message to display\n * @returns Function to stop the spinner\n */\nexport function showSpinner(message: string): () => void {\n  console.log(`${pc.cyan('⟳')} ${message}`);\n  return () => {};\n}\n","import { defineCommand } from 'citty';\nimport consola from 'consola';\nimport { join } from 'pathe';\nimport { existsSync, readFileSync } from 'fs';\nimport pc from 'picocolors';\nimport { execSync } from 'child_process';\n\nexport const updateCommand = defineCommand({\n  meta: {\n    name: 'update',\n    description: 'Update installed Nuxt layers to newer versions',\n  },\n  args: {\n    layer: {\n      type: 'positional',\n      description: 'Name of the layer to update (leave empty to update all)',\n      required: false,\n    },\n    'target-dir': {\n      type: 'string',\n      description: 'Target directory containing the project to update',\n      default: './',\n    },\n    registry: {\n      type: 'string',\n      description: 'Package registry to use',\n      default: 'npm',\n      options: ['npm', 'yarn', 'pnpm'],\n    },\n    'dry-run': {\n      type: 'boolean',\n      description: 'Show what would be updated without making changes',\n      default: false,\n    },\n    latest: {\n      type: 'boolean',\n      description: 'Update to the latest version (ignores semver constraints)',\n      default: false,\n    },\n  },\n  async run({ args }) {\n    const {\n      layer,\n      'target-dir': targetDir,\n      registry,\n      'dry-run': _dryRun,\n      latest: _useLatest,\n    } = args;\n\n    try {\n      if (layer) {\n        // Update specific layer\n        await updateLayer(layer, targetDir, registry);\n      } else {\n        // Update all layers\n        await updateAllLayers(targetDir, registry);\n      }\n    } catch (error) {\n      consola.error('Failed to update layer(s):', error);\n      process.exit(1);\n    }\n  },\n});\n\nasync function updateLayer(layer: string, targetDir: string, registry: string) {\n  consola.info(`Updating layer: ${pc.cyan(layer)}`);\n\n  try {\n    const command = getUpdateCommand(registry, layer);\n    execSync(command, {\n      cwd: targetDir,\n      stdio: 'inherit',\n    });\n    consola.success(`Successfully updated layer: ${pc.green(layer)}`);\n  } catch (error) {\n    throw new Error(`Failed to update layer ${layer}: ${error}`);\n  }\n}\n\nasync function updateAllLayers(targetDir: string, registry: string) {\n  const packageJsonPath = join(targetDir, 'package.json');\n\n  if (!existsSync(packageJsonPath)) {\n    throw new Error('No package.json found in the current directory');\n  }\n\n  try {\n    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n    const dependencies = {\n      ...packageJson.dependencies,\n      ...packageJson.devDependencies,\n    };\n\n    const layerDependencies = Object.keys(dependencies).filter((dep) =>\n      isNuxtLayer(dep)\n    );\n\n    if (layerDependencies.length === 0) {\n      consola.info('No Nuxt layers found to update');\n      return;\n    }\n\n    consola.info('Updating all Nuxt layers...');\n\n    for (const layer of layerDependencies) {\n      await updateLayer(layer, targetDir, registry);\n    }\n\n    consola.success('Successfully updated all layers');\n  } catch (error) {\n    throw new Error(`Failed to update layers: ${error}`);\n  }\n}\n\nfunction getUpdateCommand(registry: string, layer: string): string {\n  switch (registry.toLowerCase()) {\n  case 'npm':\n    return `npm update ${layer}`;\n  case 'yarn':\n    return `yarn upgrade ${layer}`;\n  case 'pnpm':\n    return `pnpm update ${layer}`;\n  default:\n    consola.warn(`Unknown registry: ${registry}, defaulting to npm`);\n    return `npm update ${layer}`;\n  }\n}\n\nfunction isNuxtLayer(packageName: string): boolean {\n  return (\n    packageName.startsWith('@nuxt/') ||\n    packageName.startsWith('nuxt-') ||\n    packageName.startsWith('@bahamut/')\n  );\n}\n"]}